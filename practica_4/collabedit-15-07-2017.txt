ADMIN MYSQL
=========================
https://www.heidisql.com/

MIDRO SD ARDUINO
==================
https://www.google.com.ec/search?q=microsd+arduino&source=lnms&tbm=isch&sa=X&ved=0ahUKEwjXrLPzt4vVAhULOCYKHWUbBc0Q_AUIBigB&biw=640&bih=351

MODULO RTC
============
http://4.bp.blogspot.com/-9zMkDIQNG9k/VbVi3Vhi_MI/AAAAAAAAQUc/_J6XTRN2rcM/s1600/Circuito-Arduino-DS1302.png

DATA LOGGER (SD CARD+MODULO RTC)
============
https://www.google.com/search?q=data+logger+shield&client=firefox-b-ab&source=lnms&tbm=isch&sa=X&ved=0ahUKEwid-_fGvYvVAhVIeSYKHU6hB5oQ_AUICigB&biw=819&bih=486

ARDUINO YUN / ARDUINO YUN SHIELD
=================================
https://store.arduino.cc/usa/arduino-yun-shield


CARPETA COMPARTIDA:::::
arduino_compartido (file://C201-PC03/arduino_compartido)

LISTADO DISPOSITIVOS COMPATIBLES RASPBERRY PI
=============================================
http://elinux.org/RPi_VerifiedPeripherals

CÁMARA RASPBERRY PI
=======================
https://www.amazon.com/s/ref=nb_sb_noss_2?url=search-alias%3Daps&field-keywords=pi+cam&rh=i%3Aaps%2Ck%3Api+cam

http://elinux.org/RPi_USB_Webcams

SDCards RASPBERRY PI
=======================
http://elinux.org/RPi_SD_cards

ADAPTADOR MICROSD
===================
https://www.amazon.com/Adapter-Standard-Connector-Smartphones-Function/dp/B01BXSKPES/ref=sr_1_1?ie=UTF8&qid=1500130565&sr=8-1&keywords=adapter+usb+micro+sd

https://www.amazon.com/Voberry-5Gbps-Super-Reader-Adapter/dp/B012D3A4FM/ref=sr_1_18?ie=UTF8&qid=1500130565&sr=8-18&keywords=adapter+usb+micro+sd

PYCOM
============
https://www.pycom.io/
https://www.pycom.io/product/lopy-twin-pack/

MICROPYTHON
==============
https://dev.to/kenwalger/micropython-and-the-nodemcu-esp8266

KICKSTARTER MARVIN
=======================
https://www.kickstarter.com/projects/688158475/marvin-the-lora-development-board?lang=es


PLUG AND PLAY SENSORS
===========================
http://wiki.seeed.cc/Grove_System/
https://www.buyraspberrypi.com.au/wp-content/uploads/2014/06/GrovePi-Grove-for-the-Raspberry-Pi-Grove-Sensors-5.jpg

GROVE STARTER KIT
===========================
https://www.buyraspberrypi.com.au/wp-content/uploads/2014/06/GrovePi-Grove-for-the-Raspberry-Pi-Grove-Sensors-5.jpg





===================================================
MYSQL

MOSTRAR BASES DE DATOS DISPONIBLES
mysql>show databases;


CONFIGURACIÓN DE MYSQL PARA ACCESO EXTERNO
-------------------------------------------
DENTRO DE MYSQL EJECUTAMOS LO SIGUIENTE
mysql>GRANT ALL PRIVILEGES ON *.* TO root@'%' IDENTIFIED BY 'root';

SALIR MYSQL
mysql>exit

SACAR RESPALDO DE ARCHIVO CONFIGURACION
#sudo cp /etc/mysql/my.cnf /etc/mysql/my_respaldo.cnf

ls /etc/mysql/
EDITAMOS EL ARCHIVO 
#sudo nano /etc/mysql/my.cnf

MODIFICAMOS LA SGT VARIABLE 
bind-address            = 0.0.0.0
SALIMOS DE LA EDICIÓN CON Ctrl+X

REINICIAR EL SERVICIO MYSQL
#sudo /etc/init.d/mysql restart

PARA ACCEDER A UNA BASE MYSQL DESDE LA TERMINAL
mysql>use nombre_base;

====================================
RASPBERRY V1 ERROR CONEXION MYSQL
"Can't get hostname for your address"

#sudo nano /etc/mysql/my.cnf

UBICARSE SECCIÓN [mysqld] Y AÑADIR LA SGT. LÍNEA
skip-name-resolve

LUEGO REINICIAMOS EL SERVICIO
#sudo /etc/init.d/mysql restart

=====================================
DESINSTALAR MYSQL
sudo apt-get remove --purge mysql\*
sudo apt-get clean
sudo updatedb


=====================================
COMANDOS LINUX

IMPRIME RUTA DEL DIRECTORIO ACTUAL
#pwd 

IMPRIME INFO INTERFACES DE RED
#ifconfig

CAMBIO DE FECHA
#sudo date -s '2017-07-15 12:18:00'

LISTAR DISPOSITIVOS USB
#lsusb

VISUALIZAR EL PUERTO ASIGNADO A UN DISPOSITIVO USB (Ejm ttyUSB0 ttyACM0)
#dmesg

EJECUTAR SCRIPT PYTHON
#python script.py

OTORGAR CLAVE AL USUARIO root
#sudo passwd

CAMBIARSE A USUARIO root
#su

MOSTRAR DE FORMA RÁPIDA UN ARCHIVO (PARA SALIR PRESIONAR q)
#less 
=======================================
TIPOS COMANDOS SQL
http://www.orafaq.com/faq/what_are_the_difference_between_ddl_dml_and_dcl_commands

OPERACIONES CRUD
Create (INSERT)
-------------------------------------------------
TODOS LOS CAMPOS
INSERT INTO data VALUES("","","","","")

CIERTOS CAMPOS
INSERT INTO data(sensor,valor) VALUES('1','30')

Read   (SELECT)
------------------------------------------------
MOSTRAR TODOS LOS CAMPOS DE TODOS LOS REGISTROS
SELECT * FROM data

MOSTRAR CIERTOS CAMPOS DE TODOS LOS REGISTROS
SELECT campo1,campo2 FROM data

PARA CIERTOS REGISTROS FILTRO
SELECT * FROM data WHERE ......
SELECT * FROM data WHERE sensor = 1
SELECT * FROM data WHERE sensor IN (2,3)
SELECT id, sensor, enviado FROM data WHERE sensor IN (2,3)


Update (UPDATE)
---------------------
UPDATE data SET campo1=valor1, campo2=valor2
WHERE .....

UPDATE data SET fecha_registro = '2017-07-15 12:10:00'
WHERE id IN (1,2,3)

UPDATE data SET fecha_registro = '2017-07-15 12:10:00'
WHERE fecha_registro >= '2017-07-10 00:00:00' AND
fecha_registro < '2017-07-11 00:00:00'


 
Delete (UPDATE/DELETE)
------------------------
DELETE FROM tabla; (MUCHO OJO)
DELETE FROM tabla WHERE ....;  


==================================================
INSTALACIÓN PAQUETE PYTHON UBIDOTS
------------------------------------

PARA RASPBERRY PI V1 EJECUTAR LO SGT.
#sudo apt-get update
#sudo apt-get install python-pip
#sudo apt-get install python-serial

#sudo pip install ubidots==1.6.6

https://github.com/ubidots/ubidots-python

PARA CONECTARSE A UBIDOTS USANDO UN TOKEN
api = ApiClient(token='XXXXXXXXXXXX')

ARDUINO SÓLO TEMP - HUM
-------------------------

#include <dht.h>

dht DHT;

#define DHT11_PIN 7

void setup(void)
{
    Serial.begin(9600);
    Serial.print("setup begin\r\n");
}
 
void loop(void)
{
    int chk = DHT.read11(DHT11_PIN);
    char tmp[3],hum[3];
    int t = DHT.temperature;
    int h = DHT.humidity;
    sprintf(tmp,"%d",t);
    sprintf(hum,"%d",h);
    Serial.print("Temp:");
    Serial.println(tmp);
    Serial.print("Hum:");
    Serial.println(hum);    
    delay(10000);
}




---------------------------------------------------
PRACTICA PYTHON RASPBERRY - ARDUINO (practica1.py)



import serial

arduino = serial.Serial('/dev/ttyUSB0',baudrate=9600, timeout=3.0)

while True:
        txt = arduino.readline()
        print txt

arduino.close()

================================================

PRÁCTICA RASPBERRY PI - UBIDOTS (practica2.py)
-------------------------------
from ubidots import ApiClient
import time
from random import randint

api = ApiClient("d9b4efd011665c753ebfb2d8ffd426ca60dff42d")
temperature = api.get_variable("5965608476254270c42eb9ac")
humedad = api.get_variable("5965608b76254270c02b3560")
while(1):

    try:
        response = temperature.save_value({"value": randint(0, 10)})
        response = humedad.save_value({"value": randint(0, 10)})
    except:
        pass
    time.sleep(5)
    
    
=================================================
PRÁCTICA DECARGA XML UBIDOTS (practica3.py)
----------------------------
from ubidots import ApiClient
import xml.etree.cElementTree as ET
import time
import datetime

api = ApiClient("4c41f5231e95f4cb94fb1c97e7850baa1e80dcf7")
temperature = api.get_variable("581652f47625423c17dbe34f")

response_t = temperature.get_values()

## dd/mm/yyyy format

if len(response_t):
    root = ET.Element("datos_temperatura")
    for t in response_t:
        temperatura = ET.SubElement(root, "temperatura")
        temperatura.text = str(t['value'])
        temperatura.set('tiempo', datetime.datetime.fromtimestamp(t["timestamp"]/1e3).strftime('%d-%m-%Y %H:%M:%S'))
    tree = ET.ElementTree(root)
    tree.write("temperatura_"+ time.strftime("%d_%m_%Y_%H_%M_%S") +".xml")
    
    
================================================

PRÁCTICA SUBIDA XML UBIDOTS (practica4.py)
----------------------------

import xml.etree.ElementTree as ET
from ubidots import ApiClient
import time
import datetime

api = ApiClient("d9b4efd011665c753ebfb2d8ffd426ca60dff42d")
temperature = api.get_variable("583b524e7625422d677e0aa0")

tree = ET.parse('temperatura.xml')
root = tree.getroot() #obtengo la referencia de la raiz
for item in root:  #obtengo los hijos desde la raiz
    fecha = int(time.mktime(datetime.datetime.strptime(item.attrib["tiempo"], '%d-%m-%Y %H:%M:%S').timetuple()))
    fecha = int(fecha * 1e3)
    response = temperature.save_value({"value": int(float(item.text)),
                                       "timestamp": fecha})


===============================================
(practica4.py) MEJORADO USANDO try except y sleep

import xml.etree.ElementTree as ET
from ubidots import ApiClient
import time
import datetime

api = ApiClient("d9b4efd011665c753ebfb2d8ffd426ca60dff42d")
temperature = api.get_variable("5965608476254270c42eb9ac")

tree = ET.parse('temperatura_15_07_2017_15_03_57.xml')
root = tree.getroot() #obtengo la referencia de la raiz
for item in root:  #obtengo los hijos desde la raiz
    try:
        fecha = int(time.mktime(datetime.datetime.strptime(item.attrib["tiempo"], '%d-%m-%Y %H:%M:%S').timetuple()))
        fecha = int(fecha * 1e3)
        response = temperature.save_value({"value": int(float(item.text)),"timestamp": fecha})
        print("subiendo..")
    except:
        pass
    time.sleep(1)       
    
    
===============================================
-------------------------------------
INSTALACIÓN PAQUETE MYSQL PARA PYTHON
apt-get install python-mysqldb
---------------------------------------
SCRIPT PYTHON BASE DE DATOS (practica5.py)
---------------------------------------
import serial
import MySQLdb
import time

while True:
    try:
        con = MySQLdb.connect(host="localhost",user="root",passwd="root",db="base_practica")
        arduino = serial.Serial('/dev/ttyUSB0',baudrate=9600,timeout=3.0)
        txt = ''
        time.sleep(10)
        while True:
            try:
                time.sleep(10)
                txt     = arduino.readline()
                time.sleep(5)
                cursor  = con.cursor()
                sql     = """INSERT INTO data(sensor,valor) VALUES(%s,%s)"""
                val     = ""
                sensor  = 0
                if "Temp" in txt:
                        sensor  = 1
                        val     = txt[5:7]
                        print "Ingresando tmp "+val
                elif "Hum" in txt:
                        sensor  = 2
                        val     = txt[4:6]      
                        print "Ingresando hum "+txt[4:6]            
                
                if sensor==1 or sensor==2:
                    cursor.execute(sql,(sensor,val))
                    con.commit()
                cursor.close()              
            except Exception, e:
                print "Error:"+str(e)
                con.rollback()          
        arduino.close()
        con.close()
    except Exception, e:
        print "Error:"+str(e)
        time.sleep(10)  
            
================================================
--------------------------------------
SCRIPT PYTHON MYSQL+UBIDOTS (practica6.py)
--------------------------------------

from ubidots import ApiClient
import MySQLdb
import httplib
import time
#Create an "API" object
api = ApiClient(token='S1fEgMUJ8hfl2YfNF1pQMUbcTs6MN8')
con = MySQLdb.connect(host="localhost",user="root",passwd="root",db="base_practica")
try:
    variable_tmp = "5965608476254270c42eb9ac"
    variable_hum = "5965608b76254270c02b3560"
    while 1:
        time.sleep(20)
        cursor = con.cursor()
        cursor.execute("SELECT id,sensor,valor FROM data WHERE enviado=0 ORDER BY fecha_registro ASC;") 
        reg     = cursor.fetchone()
        if len(reg) != 0:
            try:
                id_sensor   = reg[0]
                sensor      = reg[1]
                valor       = reg[2]
                print("sensor=%s valor=%s"%(sensor,valor))
                if sensor==1:               
                    variable = api.get_variable(variable_tmp)
                else:
                    variable = api.get_variable(variable_hum)   
                resultado = variable.save_value({'value': valor})
                print resultado         
                sql = """UPDATE data SET enviado = 1 WHERE id = %s"""
                cursor.execute(sql,(id_sensor))
                con.commit()                
                print "Guardado exitoso.."
            except Exception,e:
                print("Error:%s"%str(e));
                print "Error al guardar valor en ubidots"
            cursor.close()  
        else:
            print "error consulta\n"
except Exception,e:
    print("Error:%s"%str(e));   
    print "error en la conexion ubidots...\n"  
    
    
    
    
----------------------------------------------------
CONSULTAR ESTADO DE REGISTROS ENVIADOS y POR ENVIAR
----------------------------------------------------

(SELECT "enviados" as enviado,(SELECT count(*) FROM data WHERE enviado = 1) as num)
UNION
(SELECT "no enviados" as enviado,(SELECT count(*) FROM data WHERE enviado = 0) as num)    


=================================================
---------------------------------------------------
GUARDAR BD + LOGGING PYTHON (practica7.py)
---------------------------------------------------
import serial
import MySQLdb
import time
import logging

logger = logging.getLogger('guardarBD')
handler = logging.FileHandler('/var/log/guardarBD.log')
formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)
logger.setLevel(logging.INFO)
logger.info('Iniciando script guardarBD')

while True:
    try:
        con = MySQLdb.connect(host="localhost",user="root",passwd="root",db="base_practica")
        arduino = serial.Serial('/dev/ttyACM0',baudrate=9600,timeout=3.0)
        txt = ''
        time.sleep(10)
        while True:
            try:
                time.sleep(10)
                txt     = arduino.readline()
                time.sleep(5)
                cursor  = con.cursor()
                sql     = """INSERT INTO data(sensor,valor) VALUES(%s,%s)"""
                val     = ""
                sensor  = 0
                if "Temp" in txt:
                        sensor  = 1
                        val     = txt[5:7]
                        logger.info('Ingresando tmp %s',val)
                elif "Hum" in txt:
                        sensor  = 2
                        val     = txt[4:6]      
                        logger.info('Ingresando hum %s',txt[4:6])   
                
                if sensor==1 or sensor==2:
                    cursor.execute(sql,(sensor,val))
                    con.commit()
                cursor.close()              
            except Exception, e:
                logger.error(str(e))
                con.rollback()          
        arduino.close()
        con.close()
    except Exception, e:
        logger.error(str(e))
        time.sleep(10)  

=================================================
COMANDO PARA VISUALIZAR LAS ÚLTIMAS 5 LÍNEAS DEL ARCHIVO LOG
#tail -f -n 5 /var/log/guardarBD.log

=================================================


----------------------------------------------
ENVIAR UBIDOTS + LOGGING PYTHON (practica8.py)
----------------------------------------------

from ubidots import ApiClient
import MySQLdb
import httplib
import time
import logging


logger = logging.getLogger('enviarUbidots')
handler = logging.FileHandler('/var/log/enviarUbidots.log')
formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)
logger.setLevel(logging.INFO)
logger.info('Iniciando script enviarUbidots')


#Create an "API" object
api = ApiClient(token='850yELTsqB1KkIdkY9VCbcgPW2IsgS')
con = MySQLdb.connect(host="localhost",user="root",passwd="root",db="base_practica")
try:
    variable_tmp = "5831fabc762542366aa7ef17"
    variable_hum = "5831fac3762542366aa7ef3c"
    while 1:
        time.sleep(20)
        cursor = con.cursor()
        cursor.execute("SELECT id,sensor,valor FROM data WHERE enviado=0 ORDER BY fecha_registro ASC;") 
        reg     = cursor.fetchone()
        if len(reg) != 0:
            try:
                id_sensor   = reg[0]
                sensor      = reg[1]
                valor       = reg[2]
                logger.info("sensor=%s valor=%s",sensor,valor)
                if sensor==1:               
                    variable = api.get_variable(variable_tmp)
                else:
                    variable = api.get_variable(variable_hum)   
                resultado = variable.save_value({'value': valor})   
                logger.info(resultado)
                sql = """UPDATE data SET enviado = 1 WHERE id = %s"""
                cursor.execute(sql,(id_sensor))
                con.commit()                
                logger.info('Guardado exitoso..')
            except Exception,e:
                logger.error('Error al guardar valor en ubidots')
                cursor.close()  
        else:
            logger.error('error al consultar')
except Exception,e:
    logger.error(str(e))
    logger.error('Error en la conexion ubidots...')
        

------------------------------------------
EJECUCIÓN PROCESO EN BACKGROUND
#comando &
